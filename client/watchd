#!/usr/bin/env python3

import os
import random
import subprocess
import sys
import tempfile
import threading
import pathlib
import time
import shutil
import subprocess
from sys import platform

import git
import requests
from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
from git import Repo


BASE_DIR = os.path.join(tempfile.gettempdir(), 'watchd')
os.makedirs(BASE_DIR, exist_ok=True)

HOLD_FILE = '__STREAMD_HOLD__'


app = Flask(__name__, static_folder=BASE_DIR)
cors = CORS(app, resources={'/*': {'origins': '*'}})


SERVER_HOST = '127.0.0.1'
SERVER_PORT = 1337

CLIENT_HOST = '127.0.0.1'
CLIENT_PORT = 1338


def main(argv):
    assert len(argv) == 2

    url = argv[1]
    repo_dir = os.path.join(BASE_DIR, url.split('/')[-1])

    shutil.rmtree(repo_dir, ignore_errors=True)
    repo = Repo.clone_from(url, repo_dir, branch='master')

    link = f'http://{SERVER_HOST}:{SERVER_PORT}/stream/{os.path.basename(os.path.normpath(repo_dir))}'
    print(f'Opening {link}')

    while True:
        if not os.path.isfile(os.path.join(repo.working_tree_dir, HOLD_FILE)):
            try:
                repo.git.pull('origin', 'master')
            except git.exc.GitCommandError:  # branch exists
                pass

        time.sleep(0.5)


def flat2nested(f, d, i):
    path = pathlib.Path(f)
    parts = path.parts[i:]

    fname = '/'.join(path.parts[:i+1])

    if len(parts) == 1:
        d['contents'].append({'name': fname, 'contents': []})
    else:
        nd = {'name': fname, 'contents': []}
        d['contents'].append(nd)
        flat2nested(f, nd, i+1)

    return d


@app.route('/files/<repo_id>', methods=['GET'])
def files(repo_id):
    repo = Repo(os.path.join(BASE_DIR, repo_id))

    files = repo.git.ls_files().split()

    d = {'name': 'Source', 'contents': []}

    for f in files:
        flat2nested(f, d, 0)

    return jsonify(d)


@app.route('/commits/<repo_id>', methods=['GET'])
def commits(repo_id):
    repo = Repo(os.path.join(BASE_DIR, repo_id))

    return jsonify(commits=repo.git.log('master', '--reverse', format='%H').split())


@app.route('/commit/<repo_id>/<commit_id>')
def commit(repo_id, commit_id):
    repo = Repo(os.path.join(BASE_DIR, repo_id))

    # interrupt pulls
    open(os.path.join(repo.working_tree_dir, HOLD_FILE), 'w').close()

    repo.git.checkout(commit_id)

    return 'OK'


@app.route('/commit/<repo_id>')
def pull_continue(repo_id):
    repo = Repo(os.path.join(BASE_DIR, repo_id))

    try:
        repo.git.checkout('master')
    except git.exc.GitCommandError:
        pass

    try:
        os.remove(os.path.join(BASE_DIR, repo_id, HOLD_FILE))
    except FileNotFoundError:
        pass

    return 'OK'


if __name__ == '__main__':
    m = threading.Thread(target=main, args=(sys.argv,))
    m.start()

    try:
        app.run(host=CLIENT_HOST, port=CLIENT_PORT, debug=False)
    except OSError:
        pass
    except KeyboardInterrupt:
        exit(0)

    try:
        m.join()
    except KeyboardInterrupt:
        exit(0)
